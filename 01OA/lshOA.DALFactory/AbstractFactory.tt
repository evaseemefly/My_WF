<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs" #>
 <#
CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"..\\lshOA.MODEL\\14OAEntities.edmx";

EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

#>
using System.Configuration;
using System.Reflection;
using lshOA.IDAL;

namespace lshOA.DALFactory
{
	public partial class AbstractFactory
     {
<#
 foreach(EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e=>e.Name))
   {
   #>
		public static I<#=entity.Name#>DAL Create<#=entity.Name#>DAL()
        {
            //获取类的全名称：命名空间+类名
            //使用反射创建注意需要添加该类库的引用
           string fullClassName = NameSpace + ".<#=entity.Name#>DAL";
           return CreateInstance(fullClassName) as I<#=entity.Name#>DAL;            
        }
	<#}#>
	}
}