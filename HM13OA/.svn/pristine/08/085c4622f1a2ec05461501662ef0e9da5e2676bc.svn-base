using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;
using HM13OA.Model;

namespace HM13OA.DAL
{
    public partial class UserInfoDal
    {
        DbContext context=new HM13OAContainer();

        //增加
        public int Add(UserInfo userInfo)
        {
            context.Set<UserInfo>().Add(userInfo);
            return context.SaveChanges();
        }

        //修改
        public int Edit(UserInfo userInfo)
        {
            context.Entry(userInfo).State = EntityState.Modified;
            return context.SaveChanges();
        }

        //删除
        public int Remove(int id)
        {
            UserInfo u1 = context.Set<UserInfo>().Find(id);
            context.Set<UserInfo>().Remove(u1);
            return context.SaveChanges();
        }

        public int Remove(int[] ids)
        {
            int counter = ids.Length;
            for (int i = 0; i < counter; i++)
            {
                UserInfo u1 = context.Set<UserInfo>().Find(ids[i]);
                context.Set<UserInfo>().Remove(u1);
            }
            return context.SaveChanges();
        }

        public int Remove(UserInfo userInfo)
        {
            context.Set<UserInfo>().Remove(userInfo);
            return context.SaveChanges();
        }

        //查询
        public UserInfo GetById(int id)
        {
            return context.Set<UserInfo>().Find(id);
        }

        public IQueryable<UserInfo> GetList(Expression<Func<UserInfo, bool>> whereLambda)
        {
            return context.Set<UserInfo>().Where(whereLambda);
            //IEnumerable:select * from userinfo
            //IQueryable:select * from userinfo where ...
        }

        public IQueryable<UserInfo> GetPageList<TKey>(Expression<Func<UserInfo,bool>> whereLambda,Expression<Func<UserInfo,TKey>> orderLambda,int pageIndex,int pageSize)
        {
            return context.Set<UserInfo>().Where(whereLambda)
                .OrderByDescending(orderLambda)
                .Skip((pageIndex - 1)*pageSize)
                .Take(pageSize);
        }

    }
}
